{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/unique.js","../lib/print.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport contains from '@stdlib/assert-contains';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isnan from '@stdlib/assert-is-nan';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar ALTERNATIVE_VALUES = [ 'two-sided', 'less', 'greater' ];\nvar ZERO_METHOD_VALUES = [ 'pratt', 'wilcox', 'zsplit' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {boolean} [options.exact] - whether to force using the exact distribution instead of a normal approximation when there are more than fifty data points\n* @param {boolean} [options.correction] - continuity correction adjusting the Wilcoxon rank statistic by 0.5 towards the mean\n* @param {string} [options.zeroMethod] - method governing how zero-differences are handled (`pratt`, `wilcox` or `zsplit`)\n* @param {number} [options.mu] - mean under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0fs2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '0fs8h', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( '0fs2i', 'alternative', opts.alternative ) );\n\t\t}\n\t\tif ( !contains( ALTERNATIVE_VALUES, opts.alternative ) ) {\n\t\t\treturn new Error( format( '0fs3t', 'alternative', ALTERNATIVE_VALUES.join( '\", \"' ), opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'correction' ) ) {\n\t\topts.correction = options.correction;\n\t\tif ( !isBoolean( opts.correction ) || isnan( opts.correction ) ) {\n\t\t\treturn new TypeError( format( '0fs30', 'correction', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'exact' ) ) {\n\t\topts.exact = options.exact;\n\t\tif (\n\t\t\t!isBoolean( opts.exact ) ||\n\t\t\tisnan( opts.exact )\n\t\t) {\n\t\t\treturn new TypeError( format( '0fs30', 'exact', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( format( '0fs8h', 'mu', opts.mu ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'zeroMethod' ) ) {\n\t\topts.zeroMethod = options.zeroMethod;\n\t\tif ( !isString( opts.zeroMethod ) ) {\n\t\t\treturn new TypeError( format( '0fs2i', 'zeroMethod', opts.alternative ) );\n\t\t}\n\t\tif ( !contains( ZERO_METHOD_VALUES, opts.zeroMethod ) ) {\n\t\t\treturn new Error( format( '0fs3t', 'zeroMethod', ZERO_METHOD_VALUES.join( '\", \"' ), opts.zeroMethod ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Removes duplicate values from a numeric array.\n*\n* @private\n* @param {NumberArray} arr - array to be deduped\n* @returns {NumberArray} deduped array\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\tarr = arr.slice();\n\tarr.sort( ascending );\n\tlen = arr.length;\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = arr[ i ];\n\t\tif ( arr[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tarr[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tarr.length = j + 1;\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nexport default unique;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport roundn from '@stdlib/math-base-special-roundn';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0fs3X', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( '0fs3b', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( '0fs30', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tif ( this.method === 'Paired Wilcoxon signed rank test' ) {\n\t\tstr += 'Median of the difference `x - y` is ';\n\t} else {\n\t\tstr += 'Median of `x` is ';\n\t}\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default print;\n","/* eslint-disable max-statements, max-lines-per-function */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { primitives as isNumberArray } from '@stdlib/assert-is-number-array';\nimport isTypedArrayLike from '@stdlib/assert-is-typed-array-like';\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport ranks from '@stdlib/stats-ranks';\nimport { factory as normalCDF } from '@stdlib/stats-base-dists-normal-cdf';\nimport signrankCDF from '@stdlib/stats-base-dists-signrank-cdf';\nimport tabulate from '@stdlib/utils-tabulate';\nimport signum from '@stdlib/math-base-special-signum';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport Float64Array from '@stdlib/array-float64';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\nimport unique from './unique.js';\nimport print from './print.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar pnorm = normalCDF( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a Wilcoxon signed rank test.\n*\n* @param {NumericArray} x - data array\n* @param {NumericArray} [y] - optional paired data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less`, or `greater`)\n* @param {string} [options.zeroMethod='wilcox'] - method governing how zero-differences are handled (`pratt`, `wilcox`, or `zsplit`)\n* @param {boolean} [options.correction=true] - continuity correction adjusting the Wilcoxon rank statistic by 0.5 towards the mean\n* @param {boolean} [options.exact=false] - whether to force using the exact distribution instead of a normal approximation when there are more than fifty data points\n* @param {number} [options.mu=0] - location parameter under H0\n* @throws {TypeError} `x` must be a numeric array\n* @throws {TypeError} `y` must be a numeric array\n* @throws {TypeError} options must be an object\n* @throws {TypeError} `alpha` option has to be a number\n* @throws {RangeError} `alpha` option has to be a number in the interval `[0,1]`\n* @throws {TypeError} `alternative` option has to be a string\n* @throws {Error} `alternative` option must be `two-sided`, `less`, or `greater`\n* @throws {TypeError} `zeroMethod` option has to be a string\n* @throws {Error} `zeroMethod` option must be `pratt`, `wilcox`, or `zsplit`\n* @throws {TypeError} `correction` option has to be a boolean\n* @throws {TypeError} `exact` option has to be a boolean\n* @throws {TypeError} `mu` option has to be a number\n* @returns {Object} test result object\n*\n* @example\n* var x = [ 6, 8, 14, 16, 23, 24, 28, 29, 41, -48, 49, 56, 60, -67, 75 ];\n* var out = wilcoxon( x, {\n*     'mu': 2\n* });\n*\n* @example\n* var x = [ 6, 8, 14, 16, 23, 24, 28, 29, 41, -48, 49, 56, 60, -67, 75 ];\n* var out = wilcoxon( x, {\n*     'alternative': 'greater'\n* });\n*/\nfunction wilcoxon() {\n\tvar correction;\n\tvar zeroMethod;\n\tvar options;\n\tvar hasTies;\n\tvar counts;\n\tvar repsum;\n\tvar rplus;\n\tvar nzero;\n\tvar rzero;\n\tvar alpha;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar len;\n\tvar tmp;\n\tvar out;\n\tvar ad;\n\tvar mu;\n\tvar mn;\n\tvar se;\n\tvar d;\n\tvar i;\n\tvar r;\n\tvar T;\n\tvar v;\n\tvar x;\n\tvar y;\n\n\tx = arguments[ 0 ];\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( '0fs8j', x ) );\n\t}\n\tlen = x.length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( isObject( arguments[ 1 ] ) ) {\n\t\t\toptions = arguments[ 1 ];\n\t\t} else {\n\t\t\ty = arguments[ 1 ];\n\t\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. `%s` argument must be a numeric array. Value: `%s`.', 'y', y ) );\n\t\t\t}\n\t\t\tif ( len !== y.length ) {\n\t\t\t\tthrow new Error( format( '0fs1H' ) );\n\t\t\t}\n\t\t\tif ( arguments.length > 2 ) {\n\t\t\t\toptions = arguments[ 2 ];\n\t\t\t}\n\t\t}\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tmu = opts.mu || 0.0;\n\tif ( opts.correction === void 0 ) {\n\t\tcorrection = true;\n\t} else {\n\t\tcorrection = opts.correction;\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( len < 2 ) {\n\t\tthrow new Error( format( '0fsAn', x ) );\n\t}\n\talt = opts.alternative || 'two-sided';\n\tzeroMethod = opts.zeroMethod || 'wilcox';\n\n\tif ( zeroMethod === 'wilcox' ) {\n\t\t// Only keep all non-zero differences:\n\t\td = [];\n\t\tif ( y ) {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = ( x[ i ] - y[ i ] ) - mu;\n\t\t\t\tif ( v !== 0 ) {\n\t\t\t\t\td.push( v );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( x[ i ] !== 0 ) {\n\t\t\t\t\td.push( x[ i ] - mu );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tnzero = x.length - d.length;\n\t} else {\n\t\td = new Float64Array( len );\n\t\tnzero = 0;\n\t\tif ( y ) {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\td[ i ] = ( x[ i ] - y[ i ] ) - mu;\n\t\t\t\tif ( d[ i ] === 0 ) {\n\t\t\t\t\tnzero += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\td[ i ] = x[ i ] - mu;\n\t\t\t\tif ( d[ i ] === 0 ) {\n\t\t\t\t\tnzero += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ( nzero === len ) {\n\t\tthrow new Error( format( '0fs1Q' ) );\n\t}\n\t// Update length after potentially discarding zero values:\n\tlen = d.length;\n\tad = new Float64Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tad[ i ] = abs( d[ i ] );\n\t}\n\tr = ranks( ad );\n\trplus = 0;\n\trzero = 0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( d[ i ] > 0 ) {\n\t\t\trplus += r[ i ];\n\t\t}\n\t\telse if ( d[ i ] === 0 ) {\n\t\t\trzero += r[ i ];\n\t\t}\n\t}\n\thasTies = unique( r ).length !== r.length;\n\tif ( zeroMethod === 'zsplit' ) {\n\t\trplus += rzero / 2.0;\n\t}\n\tT = rplus;\n\tmn = len * ( len + 1.0 ) * 0.25;\n\tse = len * ( len + 1.0 ) * ( ( 2.0 * len ) + 1.0 );\n\n\tif ( zeroMethod === 'pratt' ) {\n\t\ttmp = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( d[ i ] !== 0 ) {\n\t\t\t\ttmp.push( r[ i ] );\n\t\t\t}\n\t\t}\n\t\tr = tmp;\n\t\tmn -= nzero * ( nzero + 1.0 ) * 0.25;\n\t\tse -= nzero * ( nzero + 1.0 ) * ( ( 2.0 * nzero ) + 1.0 );\n\t}\n\tcounts = tabulate( r );\n\trepsum = 0;\n\tfor ( i = 0; i < counts.length; i++ ) {\n\t\tif ( counts[ i ][ 1 ] > 1 ) {\n\t\t\tv = counts[ i ][ 1 ];\n\t\t\trepsum += v * ( (v*v) - 1 );\n\t\t}\n\t}\n\tif ( repsum > 0 ) {\n\t\t// Correction for repeated values:\n\t\tse -= 0.5 * repsum;\n\t}\n\tse = sqrt( se / 24.0 );\n\n\tif (\n\t\t( len > 50 && !opts.exact ) ||\n\t\tnzero > 0 ||\n\t\thasTies\n\t) {\n\t\td = 0.0;\n\t\tif ( correction ) {\n\t\t\tswitch ( alt ) {\n\t\t\tcase 'two-sided':\n\t\t\t\td = 0.5 * signum( T - mn );\n\t\t\t\tbreak;\n\t\t\tcase 'less':\n\t\t\t\td = -0.5;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\td = 0.5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Compute test statistic and p-value using normal approximation:\n\t\tstat = ( T - mn - d ) / se;\n\t\tif ( alt === 'two-sided' ) {\n\t\t\tpval = 2.0 * ( 1.0 - pnorm( abs( stat ) ) );\n\t\t} else if ( alt === 'greater' ) {\n\t\t\tpval = 1.0 - pnorm( stat );\n\t\t} else {\n\t\t\tpval = pnorm( stat );\n\t\t}\n\t} else {\n\t\t// Compute test statistic and p-value using exact critical values:\n\t\tstat = T;\n\t\tif ( alt === 'two-sided' ) {\n\t\t\tif ( stat > ( len * ( len+1 ) / 4 ) ) {\n\t\t\t\tpval = 2.0 * ( 1 - signrankCDF( stat - 1, len ) );\n\t\t\t} else {\n\t\t\t\tpval = 2.0 * signrankCDF( stat, len );\n\t\t\t}\n\t\t} else if ( alt === 'greater' ) {\n\t\t\tpval = 1.0 - signrankCDF( stat - 1, len );\n\t\t} else {\n\t\t\tpval = signrankCDF( stat, len );\n\t\t}\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', T );\n\tsetReadOnly( out, 'nullValue', mu );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', ( ( y ) ? 'Paired' : 'One-Sample' ) + ' Wilcoxon signed rank test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default wilcoxon;\n"],"names":["ALTERNATIVE_VALUES","ZERO_METHOD_VALUES","validate","opts","options","isObject","TypeError","format","hasOwnProp","alpha","isNumber","isnan","RangeError","alternative","isString","contains","Error","join","correction","isBoolean","exact","mu","zeroMethod","ascending","a","b","unique","arr","len","val","i","j","slice","sort","length","print","decision","dgts","str","arguments","isPositiveInteger","digits","this","method","nullValue","roundn","pValue","statistic","rejected","pnorm","normalCDF","wilcoxon","hasTies","counts","repsum","rplus","nzero","rzero","pval","stat","alt","err","tmp","out","ad","mn","se","d","r","T","v","x","y","isTypedArrayLike","isNumberArray","push","Float64Array","abs","ranks","tabulate","sqrt","signum","signrankCDF","setReadOnly"],"mappings":"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"}