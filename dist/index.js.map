{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/unique.js", "../lib/print.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar contains = require( '@stdlib/array-base-assert-contains' ).factory;\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar ALTERNATIVE_VALUES = [ 'two-sided', 'less', 'greater' ];\nvar ZERO_METHOD_VALUES = [ 'pratt', 'wilcox', 'zsplit' ];\n\nvar isAlternativeValue = contains( ALTERNATIVE_VALUES );\nvar isZeroMethod = contains( ZERO_METHOD_VALUES );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {boolean} [options.exact] - whether to force using the exact distribution instead of a normal approximation when there are more than fifty data points\n* @param {boolean} [options.correction] - continuity correction adjusting the Wilcoxon rank statistic by 0.5 towards the mean\n* @param {string} [options.zeroMethod] - method governing how zero-differences are handled (`pratt`, `wilcox` or `zsplit`)\n* @param {number} [options.mu] - mean under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t\tif ( !isAlternativeValue( opts.alternative ) ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'alternative', ALTERNATIVE_VALUES.join( '\", \"' ), opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'correction' ) ) {\n\t\topts.correction = options.correction;\n\t\tif ( !isBoolean( opts.correction ) || isnan( opts.correction ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'correction', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'exact' ) ) {\n\t\topts.exact = options.exact;\n\t\tif (\n\t\t\t!isBoolean( opts.exact ) ||\n\t\t\tisnan( opts.exact )\n\t\t) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'exact', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'mu', opts.mu ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'zeroMethod' ) ) {\n\t\topts.zeroMethod = options.zeroMethod;\n\t\tif ( !isString( opts.zeroMethod ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'zeroMethod', opts.alternative ) );\n\t\t}\n\t\tif ( !isZeroMethod( opts.zeroMethod ) ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'zeroMethod', ZERO_METHOD_VALUES.join( '\", \"' ), opts.zeroMethod ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Removes duplicate values from a numeric array.\n*\n* @private\n* @param {NumberArray} arr - array to be deduped\n* @returns {NumberArray} deduped array\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\tarr = arr.slice();\n\tarr.sort( ascending );\n\tlen = arr.length;\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = arr[ i ];\n\t\tif ( arr[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tarr[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tarr.length = j + 1;\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unique;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tif ( this.method === 'Paired Wilcoxon signed rank test' ) {\n\t\tstr += 'Median of the difference `x - y` is ';\n\t} else {\n\t\tstr += 'Median of `x` is ';\n\t}\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n", "/* eslint-disable max-statements, max-lines-per-function */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert-is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar ranks = require( '@stdlib/stats-ranks' );\nvar normalCDF = require( '@stdlib/stats-base-dists-normal-cdf' ).factory;\nvar signrankCDF = require( '@stdlib/stats-base-dists-signrank-cdf' );\nvar tabulate = require( '@stdlib/utils-tabulate' );\nvar signum = require( '@stdlib/math-base-special-signum' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar unique = require( './unique.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar pnorm = normalCDF( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a Wilcoxon signed rank test.\n*\n* @param {NumericArray} x - data array\n* @param {NumericArray} [y] - optional paired data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less`, or `greater`)\n* @param {string} [options.zeroMethod='wilcox'] - method governing how zero-differences are handled (`pratt`, `wilcox`, or `zsplit`)\n* @param {boolean} [options.correction=true] - continuity correction adjusting the Wilcoxon rank statistic by 0.5 towards the mean\n* @param {boolean} [options.exact=false] - whether to force using the exact distribution instead of a normal approximation when there are more than fifty data points\n* @param {number} [options.mu=0] - location parameter under H0\n* @throws {TypeError} `x` must be a numeric array\n* @throws {TypeError} `y` must be a numeric array\n* @throws {TypeError} options must be an object\n* @throws {TypeError} `alpha` option has to be a number\n* @throws {RangeError} `alpha` option has to be a number in the interval `[0,1]`\n* @throws {TypeError} `alternative` option has to be a string\n* @throws {Error} `alternative` option must be `two-sided`, `less`, or `greater`\n* @throws {TypeError} `zeroMethod` option has to be a string\n* @throws {Error} `zeroMethod` option must be `pratt`, `wilcox`, or `zsplit`\n* @throws {TypeError} `correction` option has to be a boolean\n* @throws {TypeError} `exact` option has to be a boolean\n* @throws {TypeError} `mu` option has to be a number\n* @returns {Object} test result object\n*\n* @example\n* var x = [ 6, 8, 14, 16, 23, 24, 28, 29, 41, -48, 49, 56, 60, -67, 75 ];\n* var out = wilcoxon( x, {\n*     'mu': 2\n* });\n*\n* @example\n* var x = [ 6, 8, 14, 16, 23, 24, 28, 29, 41, -48, 49, 56, 60, -67, 75 ];\n* var out = wilcoxon( x, {\n*     'alternative': 'greater'\n* });\n*/\nfunction wilcoxon() {\n\tvar correction;\n\tvar zeroMethod;\n\tvar options;\n\tvar hasTies;\n\tvar counts;\n\tvar repsum;\n\tvar rplus;\n\tvar nzero;\n\tvar rzero;\n\tvar alpha;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar len;\n\tvar tmp;\n\tvar out;\n\tvar ad;\n\tvar mu;\n\tvar mn;\n\tvar se;\n\tvar d;\n\tvar i;\n\tvar r;\n\tvar T;\n\tvar v;\n\tvar x;\n\tvar y;\n\n\tx = arguments[ 0 ];\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tlen = x.length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( isObject( arguments[ 1 ] ) ) {\n\t\t\toptions = arguments[ 1 ];\n\t\t} else {\n\t\t\ty = arguments[ 1 ];\n\t\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. `%s` argument must be a numeric array. Value: `%s`.', 'y', y ) );\n\t\t\t}\n\t\t\tif ( len !== y.length ) {\n\t\t\t\tthrow new Error( 'invalid arguments. First and second arguments must have the same length.' );\n\t\t\t}\n\t\t\tif ( arguments.length > 2 ) {\n\t\t\t\toptions = arguments[ 2 ];\n\t\t\t}\n\t\t}\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tmu = opts.mu || 0.0;\n\tif ( opts.correction === void 0 ) {\n\t\tcorrection = true;\n\t} else {\n\t\tcorrection = opts.correction;\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( len < 2 ) {\n\t\tthrow new Error( format( 'invalid argument. First argument must contain at least two elements. Value: `%s`.', x ) );\n\t}\n\talt = opts.alternative || 'two-sided';\n\tzeroMethod = opts.zeroMethod || 'wilcox';\n\n\tif ( zeroMethod === 'wilcox' ) {\n\t\t// Only keep all non-zero differences:\n\t\td = [];\n\t\tif ( y ) {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = ( x[ i ] - y[ i ] ) - mu;\n\t\t\t\tif ( v !== 0 ) {\n\t\t\t\t\td.push( v );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( x[ i ] !== 0 ) {\n\t\t\t\t\td.push( x[ i ] - mu );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tnzero = x.length - d.length;\n\t} else {\n\t\td = new Float64Array( len );\n\t\tnzero = 0;\n\t\tif ( y ) {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\td[ i ] = ( x[ i ] - y[ i ] ) - mu;\n\t\t\t\tif ( d[ i ] === 0 ) {\n\t\t\t\t\tnzero += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\td[ i ] = x[ i ] - mu;\n\t\t\t\tif ( d[ i ] === 0 ) {\n\t\t\t\t\tnzero += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ( nzero === len ) {\n\t\tthrow new Error( '`x` or `x - y` cannot be zero for all elements.' );\n\t}\n\t// Update length after potentially discarding zero values:\n\tlen = d.length;\n\tad = new Float64Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tad[ i ] = abs( d[ i ] );\n\t}\n\tr = ranks( ad );\n\trplus = 0;\n\trzero = 0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( d[ i ] > 0 ) {\n\t\t\trplus += r[ i ];\n\t\t}\n\t\telse if ( d[ i ] === 0 ) {\n\t\t\trzero += r[ i ];\n\t\t}\n\t}\n\thasTies = unique( r ).length !== r.length;\n\tif ( zeroMethod === 'zsplit' ) {\n\t\trplus += rzero / 2.0;\n\t}\n\tT = rplus;\n\tmn = len * ( len + 1.0 ) * 0.25;\n\tse = len * ( len + 1.0 ) * ( ( 2.0 * len ) + 1.0 );\n\n\tif ( zeroMethod === 'pratt' ) {\n\t\ttmp = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( d[ i ] !== 0 ) {\n\t\t\t\ttmp.push( r[ i ] );\n\t\t\t}\n\t\t}\n\t\tr = tmp;\n\t\tmn -= nzero * ( nzero + 1.0 ) * 0.25;\n\t\tse -= nzero * ( nzero + 1.0 ) * ( ( 2.0 * nzero ) + 1.0 );\n\t}\n\tcounts = tabulate( r );\n\trepsum = 0;\n\tfor ( i = 0; i < counts.length; i++ ) {\n\t\tif ( counts[ i ][ 1 ] > 1 ) {\n\t\t\tv = counts[ i ][ 1 ];\n\t\t\trepsum += v * ( (v*v) - 1 );\n\t\t}\n\t}\n\tif ( repsum > 0 ) {\n\t\t// Correction for repeated values:\n\t\tse -= 0.5 * repsum;\n\t}\n\tse = sqrt( se / 24.0 );\n\n\tif (\n\t\t( len > 50 && !opts.exact ) ||\n\t\tnzero > 0 ||\n\t\thasTies\n\t) {\n\t\td = 0.0;\n\t\tif ( correction ) {\n\t\t\tswitch ( alt ) {\n\t\t\tcase 'two-sided':\n\t\t\t\td = 0.5 * signum( T - mn );\n\t\t\t\tbreak;\n\t\t\tcase 'less':\n\t\t\t\td = -0.5;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\td = 0.5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Compute test statistic and p-value using normal approximation:\n\t\tstat = ( T - mn - d ) / se;\n\t\tif ( alt === 'two-sided' ) {\n\t\t\tpval = 2.0 * ( 1.0 - pnorm( abs( stat ) ) );\n\t\t} else if ( alt === 'greater' ) {\n\t\t\tpval = 1.0 - pnorm( stat );\n\t\t} else {\n\t\t\tpval = pnorm( stat );\n\t\t}\n\t} else {\n\t\t// Compute test statistic and p-value using exact critical values:\n\t\tstat = T;\n\t\tif ( alt === 'two-sided' ) {\n\t\t\tif ( stat > ( len * ( len+1 ) / 4 ) ) {\n\t\t\t\tpval = 2.0 * ( 1 - signrankCDF( stat - 1, len ) );\n\t\t\t} else {\n\t\t\t\tpval = 2.0 * signrankCDF( stat, len );\n\t\t\t}\n\t\t} else if ( alt === 'greater' ) {\n\t\t\tpval = 1.0 - signrankCDF( stat - 1, len );\n\t\t} else {\n\t\t\tpval = signrankCDF( stat, len );\n\t\t}\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', T );\n\tsetReadOnly( out, 'nullValue', mu );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', ( ( y ) ? 'Paired' : 'One-Sample' ) + ' Wilcoxon signed rank test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = wilcoxon;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a Wilcoxon signed-rank test.\n*\n* @module @stdlib/stats-wilcoxon\n*\n* @example\n* var normal = require( '@stdlib/random-base-normal' ).factory;\n* var wilcoxon = require( '@stdlib/stats-wilcoxon' );\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n* var y;\n*\n* rnorm = normal( 1.0, 2.0, {\n*     'seed': 786\n* });\n*\n* // One-sample Wilcoxon signed rank test:\n* x = new Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n* }\n* out = wilcoxon( x );\n*\n* // Paired Wilcoxon signed rank test:\n* x = new Array( 100 );\n* y = new Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n*     y[ i ] = rnorm();\n* }\n* out = wilcoxon( x, y );\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "contains", "isBoolean", "isNumber", "isObject", "isString", "isnan", "hasOwnProp", "format", "ALTERNATIVE_VALUES", "ZERO_METHOD_VALUES", "isAlternativeValue", "isZeroMethod", "validate", "opts", "options", "require_unique", "__commonJSMin", "exports", "module", "ascending", "a", "b", "unique", "arr", "len", "val", "i", "j", "require_print", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "roundn", "format", "print", "opts", "decision", "dgts", "str", "require_main", "__commonJSMin", "exports", "module", "isNumberArray", "isTypedArrayLike", "setReadOnly", "isObject", "ranks", "normalCDF", "signrankCDF", "tabulate", "signum", "sqrt", "abs", "Float64Array", "format", "validate", "unique", "print", "pnorm", "wilcoxon", "correction", "zeroMethod", "options", "hasTies", "counts", "repsum", "rplus", "nzero", "rzero", "alpha", "pval", "opts", "stat", "alt", "err", "len", "tmp", "out", "ad", "mu", "mn", "se", "d", "i", "r", "T", "v", "x", "y", "main"]
}
